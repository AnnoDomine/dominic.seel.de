# .github/workflows/ci.yml
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  actions: read
  contents: read

jobs:
  main-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          filter: tree:0
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.8.0
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Initialize python venv in folder "/apps/backend" if not present
        working-directory: apps/backend
        run: |
          if [ ! -d "venv" ]; then
            python -m venv venv
          fi
          source venv/bin/activate
          echo "Virtual environment activated."
          pip install -r requirements.txt
          deactivate

      - name: Set up Nx affected base/head SHAs
        uses: nrwl/nx-set-shas@v4

      - name: Run affected lint, test, build for all projects (FE & BE)
        env:
          DJANGO_SETTINGS_MODULE: core.settings
        run: pnpm exec nx affected -t lint test build

  release-frontend:
    name: Release Frontend
    runs-on: ubuntu-latest
    needs: main-ci
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/master' &&
      (contains(github.event.head_commit.message, 'feat(frontend)') ||
       contains(github.event.head_commit.message, 'fix(frontend)') ||
       contains(github.event.head_commit.message, 'perf(frontend)') ||
       contains(github.event.head_commit.message, 'refactor(frontend)!'))
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.8.0
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Semantic Release for Frontend
        working-directory: apps/frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  release-backend:
    name: Release Backend
    runs-on: ubuntu-latest
    needs: main-ci
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/master' &&
      (contains(github.event.head_commit.message, 'feat(backend)') ||
       contains(github.event.head_commit.message, 'fix(backend)') ||
       contains(github.event.head_commit.message, 'perf(backend)') ||
       contains(github.event.head_commit.message, 'refactor(backend)!'))

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Initialize python venv in folder "/apps/backend" if not present
        working-directory: apps/backend
        run: |
          if [ ! -d "venv" ]; then
            python -m venv venv
          fi
          source venv/bin/activate
          echo "Virtual environment activated."
          pip install -r requirements.txt
          deactivate

      - name: Run Python Semantic Release for Backend
        working-directory: apps/backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DJANGO_SETTINGS_MODULE: core.settings
        run: python -m python_semantic_release publish
