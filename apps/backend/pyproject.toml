[tool.mypy]
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]
python_version = "3.13"

[tool.django-stubs]
django_settings_module = "myproject.settings"
strict_settings = true

[tool.ruff]
target-version = "py313"
line-length = 120

exclude = [
    ".git",
    "__pycache__",
    "venv",
    "migrations", # Django migrations
    "node_modules",
    "static",
    "media",
    "build",
    "dist",
    "coverage",
    "docs",
    "tests", # Testverzeichnisse
    "examples", # Beispielverzeichnisse
    "scripts", # Skripte
    "docker", # Docker-spezifische Dateien
    "docker-compose.yml", # Docker Compose-Datei
    "tsconfig.json", # TypeScript-Konfiguration
    "tsconfig.lib.json", # TypeScript Bibliothekskonfiguration
    "tsconfig.app.json", # TypeScript Anwendungs-Konfiguration
    "tsconfig.spec.json", # TypeScript Test-Konfiguration
    "package.json", # Node.js Paketkonfiguration
    "package-lock.json", # Node.js Paket-Abhängigkeiten
    "yarn.lock", # Yarn Paket-Abhängigkeiten
    "pnpm-lock.yaml", # pnpm Paket-Abhängigkeiten
    "poetry.lock", # Poetry Paket-Abhängigkeiten
    "Pipfile", # Pipenv Paket-Abhängigkeiten
    "Pipfile.lock", # Pipenv Paket-Abhängigkeiten
    "pyproject.toml", # Projektkonfiguration
    "setup.py", # Python Setup-Skript
    "setup.cfg", # Python Setup-Konfiguration
    "requirements.txt", # Python Abhängigkeiten
    ".mypy_cache", # Mypy Cache
]

[tool.ruff.lint]
# Wähle die Regel-Sets aus, die Ruff aktivieren soll.
# Dies ist eine "Best Practice" Auswahl, die ein breites Spektrum abdeckt:
#
# E: pycodestyle errors (Standard-Syntax- und Stilfehler)
# F: Pyflakes (Erkennt ungenutzte Importe, nicht definierte Variablen etc.)
# W: pycodestyle warnings (Standard-Stilwarnungen)
# B: flake8-bugbear (Erkennt gängige Programmierfehler und potenzielle Bugs)
# I: isort (Stellt sicher, dass Importe alphabetisch sortiert und gruppiert sind)
# C901: McCabe complexity (Ein spezifischer Check für die Komplexität von Funktionen)
# PL: Pylint (Eine Auswahl gängiger Pylint-Regeln, die in Ruff implementiert sind)
#
# Du kannst weitere hinzufügen (z.B. N für pep8-naming oder D für pydocstyle),
# aber sei bereit, diese ggf. anzupassen oder zu ignorieren, da sie streng sein können.
select = [
    "E", "F", "W", "B", "I", "C901", "PL"
]

ignore= [
    "PLR0913", # Too many arguments in function (kann für Django-Views etc. zu streng sein)
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

# Per-Datei-Ignorierregeln
# Hier kannst du bestimmte Regeln für spezifische Dateien oder Muster ignorieren.
[tool.ruff.lint.per-file-ignores]
# Ignoriere E501 (Line too long) und D (Docstrings) in Django-Settings-Dateien
"apps/backend/core/settings.py" = ["E501", "D"]
# Ignoriere die meisten Linting-Regeln in Django-Migrations-Dateien (da autogeneriert)
"apps/backend/migrations/*.py" = ["E", "W", "D", "F", "I", "C901", "PL"]
# Ignoriere Docstring-Regeln in Testdateien (wenn man nicht für jeden Test-Docstrings will)
"apps/backend/tests/*.py" = ["D"]

[tool.ruff.lint.isort]
# Konfiguration für isort, um Importe zu sortieren
known-first-party = [
    "apps.backend",
]
known-third-party = [
    "django",
    "rest_framework",
    "requests",
    "numpy",
    "pandas",
]
